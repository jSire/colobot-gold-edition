extern void object::placeFlagPerimeter()
{
	// Constants that should be exported!
	
	object DZ = radar( YellowFlag );
	point CENTER ( DZ.position.x, DZ.position.y );
	float RADIUS = 3;
	int NUM_VERTICES = 8;
	
	
	// TODO: Create a new class of "perimeter-type" objects, possibly pulling from a more generic "geometry" class.
	// Create a 2D array of scaled x/y values to use as a template.
	
	float fVertices[][];
	float theta = 360 / NUM_VERTICES;
	
	for( int i = 0 ; i < NUM_VERTICES ; i++ )
	{
		fVertices[0][i] = RADIUS * cos( i * theta );
		fVertices[1][i] = RADIUS * sin( i * theta );
	}
	
	
	// Map the 2D array of x/y values onto the adjusted origin point.
	
	point pFlagLocations[];
	
	for( int i = 0 ; i < sizeof( fVertices[0] ) ; i++ )
	{
		pFlagLocations[i].x = CENTER.x + fVertices[0][i];
		pFlagLocations[i].y = CENTER.y + fVertices[1][i];
	}
	
	
	// Directly create flag perimeter (rather than driving around).
	
	for( int i = 0 ; i < sizeof( pFlagLocations ) ; i++ )
	{
		produce( pFlagLocations[i], 0, RedFlag );
	}
	
}
